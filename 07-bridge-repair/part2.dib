#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

Operation[] operations =
(from line in System.IO.File.ReadAllLines("input.txt")
let parts = line.Split(':')
let result = long.Parse(parts[0])
let operands = parts[1].Trim().Split(' ').Select(long.Parse).ToArray()
select new Operation(result, operands)).ToArray();

record Operation(long Result, long[] Operands);
long validSum = 0;
Func<long, long, long>[] operators = [Add, Multiply, Combine];

foreach (Operation operation in operations)
{
    validSum += GetResultRecursively(operation.Operands.AsSpan()[1..], operation.Result, operation.Operands[0]);
}

long GetResultRecursively(Span<long> operands, long result, long sum)
{
    if (sum > result)
    {
        return 0;
    }

    long totalSum = 0;
    if (operands.Length == 1)
    {
        foreach (var @operator in operators)
        {
            totalSum = @operator(sum, operands[0]);
            if (result == totalSum)
            {
                return totalSum;
            }
        }
    }
    else
    {
        foreach (var @operator in operators)
        {
            totalSum = @operator(sum, operands[0]);
            totalSum = GetIterativeResult(operands[1..], result, totalSum);
            if (totalSum > 0)
            {
                return totalSum;
            }
        }
    }

    return 0;
}

long Add(long operand1, long operand2)
{
    checked
    {
        return operand1 + operand2;
    }
}

long Multiply(long operand1, long operand2)
{
    checked
    {
        return operand1 * operand2;
    }
} 

long Combine(long operand1, long operand2)
{
    checked
    {
        return operand1 * Convert.ToInt64(Math.Pow(10, operand2.ToString().Length)) + operand2;
    }
}

validSum
