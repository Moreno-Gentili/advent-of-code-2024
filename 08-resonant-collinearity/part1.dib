#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

#nullable enable

const char blank = '.';
char[][] map =
(from line in System.IO.File.ReadAllLines("input.txt")
select line.ToArray()).ToArray();
Size size = new(map[0].Length, map.Length);

var antennaTypes = (from x in Enumerable.Range(0, size.Width)
from y in Enumerable.Range(0, size.Height)
let point = new Point(x, y)
let antenna = map[y][x]
where antenna != blank
let pair = (Point: point, Antenna: antenna)
group pair by pair.Antenna into grp
let points = grp.Select(g => g.Point).ToList()
select new KeyValuePair<char, List<Point>>(grp.Key, points)).ToDictionary();

HashSet<Point> distinctAntinodes = new();
foreach (char antennaType in antennaTypes.Keys)
{
    foreach ((Point Point1, Point Point2) pair in GetAllPairs(antennaTypes[antennaType]))
    {
        Distance distance = pair.Point2 - pair.Point1;
        Point projected1 = pair.Point2 + distance;
        Point projected2 = pair.Point1 - distance;
        AddAntinodeIfValid(distinctAntinodes, size, projected1, projected2);
    }
}

void AddAntinodeIfValid(HashSet<Point> antinodes, Size size, params Point[] points)
{
    foreach (Point point in points)
    {
        if (IsValid(point, size))
        {
            antinodes.Add(point);
        }
    }
}

bool IsValid(Point point, Size size) =>
    point.X < size.Width && point.Y < size.Height && point.X >= 0 && point.Y >= 0;

IEnumerable<(Point Point1, Point Point2)> GetAllPairs(List<Point> points)
{
    for (int i = 0; i < points.Count - 1; i++)
    {
        for (int j = i + 1; j < points.Count; j++)
        {
            yield return (points[i], points[j]);
        }
    }
}

record Size(int Width, int Height);
record Point(int X, int Y)
{
    public static Distance operator -(Point point1, Point point2) =>
        new Distance(point1.X - point2.X, point1.Y - point2.Y);

    public static Point operator -(Point point, Distance distance) =>
        new Point(point.X - distance.Horizontal, point.Y - distance.Vertical);

    public static Point operator +(Point point, Distance distance) =>
        new Point(point.X + distance.Horizontal, point.Y + distance.Vertical);
}

record Distance(int Horizontal, int Vertical);

distinctAntinodes.Count()
