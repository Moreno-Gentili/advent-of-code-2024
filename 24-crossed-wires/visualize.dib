#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

#nullable enable

int xy = 44;
int size = 40;

List<string> sb = new();
Dictionary<string, (int, int)> positions = new();
for (int x = 0; x <= xy; x++)
{
    int cx = size;
    int cy = size * (x * 2 + 1);
    int r = size / 5 * 2;
    string label = $"x{x.ToString().PadLeft(2, '0')}";
    positions.Add(label, (cx, cy));
    sb.Add($"""<g><circle cx="{cx}" cy="{cy}" r="{r}" fill="red"></circle><text x="{cx}" y="{cy}" text-anchor="middle" fill="white" dy=".3em">{label}</text></g>""");
}

for (int y = 0; y <= xy; y++)
{
    int cx = size;
    int cy = size * (y * 2 + 2);
    int r = size / 5 * 2;
    string label = $"y{y.ToString().PadLeft(2, '0')}";
    positions.Add(label, (cx, cy));
    sb.Add($"""<g><circle cx="{cx}" cy="{cy}" r="{r}" fill="blue"></circle><text x="{cx}" y="{cy}" text-anchor="middle" fill="white" dy=".3em">{label}</text></g>""");
}

for (int z = 0; z <= xy + 1; z++)
{
    int cx = 500;
    int cy = size * (z * 2 + 1);
    int r = size / 5 * 2;
    string label = $"z{z.ToString().PadLeft(2, '0')}";
    positions.Add(label, (cx, cy));
    sb.Add($"""<g><circle cx="{cx}" cy="{cy}" r="{r}" fill="purple"></circle><text x="{cx}" y="{cy}" text-anchor="middle" fill="white" dy=".3em">{label}</text></g>""");
}

var parts = System.IO.File.ReadAllText("input4.txt").Split("\r\n\r\n");
var nodes = parts[1].Split("\r\n").ToList();

HashSet<(int, int)> placed = new();
while (nodes.Count > 0)
{
    var node = nodes.Where(n => positions.ContainsKey(n.Split(' ')[0]) && positions.ContainsKey(n.Split(' ')[2]))
                    .OrderBy(n => Math.Min(positions[n.Split(' ')[0]].Item1, positions[n.Split(' ')[2]].Item1))
                    .ThenBy(n => n.Split(' ')[1])
                    .First();
    var pair = node.Split(' ').ToArray();
    nodes.Remove(node);
    var wire1 = pair[0];
    var wire2 = pair[2];
    var action = pair[1];
    var destination = pair[4];
    var wire1XY = positions[wire1];
    var wire2XY = positions[wire2];


    var position1 = wire1XY.Item1 < wire2XY.Item1 || (wire1XY.Item1 == wire2XY.Item1 && wire1XY.Item2 < wire2XY.Item2) ? wire1XY : wire2XY;
    var position2 = wire1XY.Item1 < wire2XY.Item1 || (wire1XY.Item1 == wire2XY.Item1 && wire1XY.Item2 < wire2XY.Item2) ? wire2XY : wire1XY;

    int cx = position1.Item1 + (size * 3);
    int cy = position1.Item2;
    if (!placed.Add((cx, cy)))
    {
        cx = position2.Item1 + (size * 3);
        cy = position2.Item2;

        if (!placed.Add((cx, cy)))
        {
            throw new Exception("foo");
        }
    }


    int r = size / 5 * 2;
    var n = pair;
    
    string label = destination;

    if (positions.TryAdd(label, (cx, cy)))
    {
        sb.Insert(0, $"""<g><circle cx="{cx}" cy="{cy}" r="{r}" fill="gray"></circle><text x="{cx}" y="{cy}" text-anchor="middle" fill="white" dy=".3em">{label}</text></g>""");
    }
    cx = positions[label].Item1;
    cy = positions[label].Item2;

    sb.Add($"""<g><line x1="{wire1XY.Item1 + r}" y1="{wire1XY.Item2}" x2="{cx - r}" y2="{cy}" stroke="black" marker-start="url(#dot)" marker-end="url(#arrow)" /><text x="{cx - 25}" y="{cy}" text-anchor="middle" fill="black" font-size="0.5em">{action}</text></g>""");
    sb.Add($"""<g><line x1="{wire2XY.Item1 + r}" y1="{wire2XY.Item2}" x2="{cx - r}" y2="{cy}" stroke="black" marker-start="url(#dot)" marker-end="url(#arrow)" /></g>""");

}


string.Join("\r\n", sb)
